// S-CPU/SPC700 communication protocol definitions
//
// SPDX-FileCopyrightText: © 2023 Marcus Rowe <undisbeliever@gmail.com>
// SPDX-License-Identifier: Zlib
//
// Copyright © 2023 Marcus Rowe <undisbeliever@gmail.com>
//
// This software is provided 'as-is', without any express or implied warranty.  In
// no event will the authors be held liable for any damages arising from the use of
// this software.
//
// Permission is granted to anyone to use this software for any purpose, including
// commercial applications, and to alter it and redistribute it freely, subject to
// the following restrictions:
//
//      1. The origin of this software must not be misrepresented; you must not
//         claim that you wrote the original software. If you use this software in
//         a product, an acknowledgment in the product documentation would be
//         appreciated but is not required.
//
//      2. Altered source versions must be plainly marked as such, and must not be
//         misrepresented as being the original software.
//
//      3. This notice may not be removed or altered from any source distribution.


import "registers";


// Loader Commands
// ===============

namespace LoaderDataType {
    // The `audio-driver.bin` file.
    // MUST be loaded first.
    let CODE        = 0;

    // Common audio data.
    // Contains samples, pitch table and sound effects.
    // MUST be loaded after `LoaderDataType.CODE` and before song data.
    let COMMON_DATA = 1;

    // Any value over `MIN_SONG_VALUE` will load song data
    // Song data MUST be loaded after `LoaderDataType.COMMON_DATA`.
    let MIN_SONG_VALUE = 2;

    // The stereo flag is set by the loader when the song is loaded into memory.
    let MONO_SONG_DATA   = MIN_SONG_VALUE;
    let STEREO_SONG_DATA = MIN_SONG_VALUE | 0x80;


    // If this bit is set, the song will be played in stereo.
    // If this bit is clear, the song will be played in mono.
    //
    // MUST NOT be set when loading code or common-audio-data.
    let STEREO_FLAG_BIT = 7;


    // If this bit is set, the echo buffer clear and `EDL` sleep will be skipped.
    //
    // NOT RECOMMENDED.
    // Enabling this flag can corrupt memory.
    // Only use this flag if the S-DSP internal echo buffer state is already set to the correct values.
    // Ie, the echo buffer was setup in a previous song AND the song's `edl` value is unchanged.
    //
    // This flag is used to reduce startup lag in exported .SPC files and the audio-driver GUI.
    let SKIP_ECHO_BUFFER_RESET_BIT = 5;
}


// IO Commands
// ===========


namespace IO {
    namespace ToDriver {
        // The command to execute.
        //
        //      iii0ccci
        //          ccc = command
        //            0 = reserved for future expansion
        //            i = command id, MUST be different on every command.
        //                Used to detect when a new command has been sent to the driver.
        //
        // NOTES:
        //  * The command will only be execute if the `command` byte has changed.
        //  * This value MUST be written last.
        //  * The command and parameter bytes MUST NOT change unless the previous command
        //    has been acknowledged.
        extern const command @ &smp.io_port_in_0 : u8;

        let N_COMMANDS = 8;
        let COMMAND_MASK   = 0b00001110;
        let COMMAND_I_MASK = 0b11100001;

        // The two command parameter bytes
        extern const parameter0 @ &smp.io_port_in_1 : u8;
        extern const parameter1 @ &smp.io_port_in_2 : u8;


        // When the `SWITCH_TO_LOADER_BIT` bit of this IO Port is set, the audio
        // driver will stop and then execute the loader.
        extern const switch_to_loader @ &smp.io_port_in_3 : u8;

        let SWITCH_TO_LOADER_BIT = 5;
        let SWITCH_TO_LOADER_MASK = 1 << (SWITCH_TO_LOADER_BIT);
    }

    namespace ToScpu {
        // Command acknowledgment
        //
        // Acknowledgment of the command.
        //
        // After the command has been executed, the `IO.ToDriver.command` w
        extern writeonly command_ack @ &smp.io_port_out_0 : u8;

        // The audio-driver MUST NOT use IO port 3 (without rewriting the loader).
        //
        // Port 3 is used by the loader to signal to the S-CPU that the loader is running.
    }

    // MUST match CommandFunctionTable in `audio-driver.wiz`.
    enum Command : u8 {
        // Play a sound effect
        //  * parameter0: sound effect id (not bounds checked)
        PLAY_SOUND_EFFECT   = 4,
    };
}


