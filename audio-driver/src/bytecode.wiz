// Audio driver bytecode instruction definitions
//
// SPDX-FileCopyrightText: © 2023 Marcus Rowe <undisbeliever@gmail.com>
// SPDX-License-Identifier: Zlib
//
// Copyright © 2023 Marcus Rowe <undisbeliever@gmail.com>
//
// This software is provided 'as-is', without any express or implied warranty.  In
// no event will the authors be held liable for any damages arising from the use of
// this software.
//
// Permission is granted to anyone to use this software for any purpose, including
// commercial applications, and to alter it and redistribute it freely, subject to
// the following restrictions:
//
//      1. The origin of this software must not be misrepresented; you must not
//         claim that you wrote the original software. If you use this software in
//         a product, an acknowledgment in the product documentation would be
//         appreciated but is not required.
//
//      2. Altered source versions must be plainly marked as such, and must not be
//         misrepresented as being the original software.
//
//      3. This notice may not be removed or altered from any source distribution.


import "audio-driver";


let MAX_PAN = 128;


namespace bytecode {

let N_NOTE_OCTAVES = 8;

let N_PLAY_NOTE_INSTRUCTIONS = N_NOTE_OCTAVES * 12 * 2;

let FIRST_PLAY_NOTE_INSTRUCTION = 64;
let FIRST_NO_ARGUMENT_INSTRUCTION_OPCODE = bytecode.INSTRUCTIONS_WITH_ARGUMENTS.len;

// The last not-note instruction is the `disable_channel` instruction
// `disable_channel` will also send a KEY-OFF event.
let DISABLE_CHANNEL_BYTECODE = FIRST_PLAY_NOTE_INSTRUCTION - 1;



// Opcodes >= FIRST_PLAY_NOTE_INSTRUCTION are a two-byte play note instruction.
//
//  nnnnnnnO llllllll
//      nnnnnnn = note to play (number of semitones above c0 + FIRST_PLAY_NOTE_INSTRUCTION / 2)
//            O = key-off after note ends
//     llllllll = note length
//
//  NOTE: This instruction will wait an extra tick if the `key-off` bit is set.
//
//  CAUTION: play-note instructions are offset by `FIRST_PLAY_NOTE_INSTRUCTION`.


// Notes about rest/note length:
//   * A rest/note length of 0 will pause for 256 ticks
//   * A rest/note instruction will wait for an extra tick if the key-off bit is set.
//   * A wait-rest chain should end with `rest 257` to prevent conflict with early-release.

// These bytecodes do have parameters
let INSTRUCTIONS_WITH_ARGUMENTS = [
    // parameters: ssssssss llllllll nnnnnnnO
    //     ssssssss = u8 speed (PITCH change per tick)
    //     llllllll = note length
    //      nnnnnnn = note to play (same note format as a play-note instruction)
    //            O = key-off after note ends
    //
    // NOTE: portamento does not emit a KON event
    portamento_down,

    // parameters: ssssssss llllllll nnnnnnnO
    //     ssssssss = u8 speed (PITCH change per tick)
    //     llllllll = note length
    //      nnnnnnn = note to play (same note format as a play-note instruction)
    //            O = key-off after note ends
    //
    // NOTE: portamento does not emit a KON event
    portamento_up,


    // parameters: pppppppp tttttttt
    //      pppppppp = pitch offset per tick.
    //      tttttttt = quarter wavelength ticks.  MUST BE >= 1 and <= 128.
    //
    // If pppppppp is 0, vibrato is disabled.
    //
    // NOTES:
    //  * The total wavelength of the vibrato is `tttttttt * 4`.
    //  * If `tttttttt` is > 128, the vibrato is unbalanced.
    //  * Vibrato has no range checking and may overflow or underflow the PITCH register.
    //  * Portamento overrides vibrato
    //  * Vibrato is disabled when calling or returning from a subroutine
    set_vibrato,


    // parameters: pppppppp nnnnnnnO llllllll
    //               pppppppp = pitch offset per tick.
    //      nnnnnnnO llllllll = note to play (same format as play_note)
    //
    // If pppppppp is 0, vibrato is disabled.
    //
    // NOTES:
    //  * No note_id range checking
    //  * Assumes vibrato quarter wavelength is set by `set_vibrato`.
    //  * Vibrato quarter wavelength is not initialised on channel reset.
    //  * Vibrato is disabled when calling or returning from a subroutine
    set_vibrato_depth_and_play_note,


    // parameters: pppppppp pppppppO llllllll
    //      ppppppp- pppppppp = VxPITCH register value (be aware of the key-off bit in the high byte)
    //                      O = key-off after note ends
    //               llllllll = note length
    play_pitch,


    // parameters: --fffffO llllllll
    //         fffff = noise frequency
    //             O = key-off after note ends
    //      llllllll = note length
    play_noise,


    // parameter = number of ticks to wait.
    // NOTE: Does not key-off the channel.
    wait,

    // parameter = number of ticks to sleep before key-off
    // Sends a key-off after sleeping and sleeps for 1 extra tick after key-off.
    // (This instruction sleeps for `parameter + 1` ticks)
    // CAUTION: A wait-rest chain should end with `rest 257` to prevent conflict with early-release.
    rest,


    // parameter = u8 instrument_id
    //
    // NOTE: There is no bounds-checking on instrument_id
    set_instrument,

    // parameter = u8 instrument_id, u8 adsr1, u8 adsr2OrGain
    //
    // ADSR/Gain is the same format as `InstrumentsSoa`.
    //
    // If bit 7 of `adsr1` is set, `adsr2OrGain` is written to the ADSR2 register
    // If bit 7 of `adsr1` is clear, ADSR is disabled and `adsr2OrGain` is written to the GAIN register.
    //
    // NOTE: There is no bounds-checking on instrument_id
    set_instrument_and_adsr_or_gain,


    // parameter = u16 value to send to the ADSR register
    set_adsr,

    // parameter = u8 value to send to the GAIN register
    // NOTE: Disables ADSR
    set_gain,


    // parameter = u8 value to temporarily send to the GAIN register
    // NOTE: a temp-gain of 0 disables temp-gain.
    // NOTE: Disables ADSR and GAIN envelope
    // The envelope will be restored on key-off.
    set_temp_gain,

    // parameters: gggggggg tttttttt
    //  gggggggg = temp GAIN value
    //  tttttttt = number of ticks to wait.
    //
    // See `set_temp_gain` and `wait`
    set_temp_gain_and_wait,

    // parameters: gggggggg tttttttt
    //  gggggggg = temp GAIN value
    //  tttttttt = number of ticks to sleep before key-off
    //
    // See `set_temp_gain` and `rest`
    set_temp_gain_and_rest,

    // parameter: u8 number of ticks to wait.
    //
    // Reuses the temp-GAIN in the last `set_temp_gain*` instruction.
    //
    // See `wait`
    reuse_temp_gain_and_wait,

    // parameter: u8 number of ticks to sleep before key-off
    //
    // Reuses the temp-GAIN in the last `set_temp_gain*` instruction.
    //
    // See `rest`
    reuse_temp_gain_and_rest,


    // parameter: u8 cmp, u8 minTicks, u8 gain
    //  * cmp = number of ticks to remove + 1
    //  * minTicks = minimum number of ticks before release
    //  * gain = GAIN envelope to use on early release
    //
    // If `gain` is 0, the note will be key-offed on early release.
    // If `gain` is non-zero, the envelope will be temporarily set to GAIN(`gain`) at early release.
    //
    // Early release is when `nextEventIsKeyOff && ticksAfterNote >= min && countdownTimer < cmp`.
    //
    // Early release is disabled if `cmp` is 0.
    //
    // CAUTION: If a note has a length less-than `cmp`, it will only be played for a single tick.
    //
    // CAUTION: The rest instruction in a `play-note rest` or `play-note wait rest` chain should be
    //          257 ticks to ensure long notes are cut at the correct time.
    set_early_release,


    // parameter: u8 cmp, u8 gain
    //  * cmp = number of ticks to remove + 1
    //  * gain = GAIN envelope to use on early release
    //
    // This instruction is `set_early_release cmp, 0, gain`.
    set_early_release_no_minimum,


    // parameter = i8 pan adjustment
    adjust_pan,

    // parameter = pan (0-MAX_PAN, MAX_PAN/2 is centered)
    //
    // NOTE: There are no range checks on the pan value. A pan value > MAX_PAN will not pan correctly.
    set_pan,

    // parameter: pppppppp vvvvvvvv
    //      pppppppp = pan (0 - MAX_PAN, MAX_PAN/2 is centered)
    //      vvvvvvvv = volume
    //
    // NOTE: There are no range checks on the pan value. A pan value > MAX_PAN will not pan correctly.
    set_pan_and_volume,

    // parameter = i8 volume adjustment
    adjust_volume,

    // parameter = u8 volume (0-255)
    set_volume,


    // parameters: tttttttt oooooooo oooooooo
    //      tttttttt          = number of ticks (0 is 256 ticks)
    //      oooooooo oooooooo = offset per tick (8.8 unsigned fixed point)
    volume_slide_up,

    // parameters: tttttttt oooooooo oooooooo
    //      tttttttt          = number of ticks (0 is 256 ticks)
    //      oooooooo oooooooo = offset per tick (8.8 unsigned fixed point)
    volume_slide_down,

    // parameters: qqqqqqqq oooooooo oooooooo
    //      qqqqqqqq          = quarter-wavelength in ticks (1 - 127)
    //      oooooooo oooooooo = offset per tick (8.8 unsigned fixed point)
    tremolo,

    // parameters: tttttttt oooooooo oooooooo
    //      tttttttt          = number of ticks (0 is 256 ticks)
    //      oooooooo oooooooo = offset per tick (8.8 unsigned fixed point)
    pan_slide_up,

    // parameters: tttttttt oooooooo oooooooo
    //      tttttttt          = number of ticks (0 is 256 ticks)
    //      oooooooo oooooooo = offset per tick (8.8 unsigned fixed point)
    pan_slide_down,

    // parameters: qqqqqqqq oooooooo oooooooo
    //      qqqqqqqq          = quarter-wavelength in ticks (1 - 127)
    //      oooooooo oooooooo = offset per tick (8.8 unsigned fixed point)
    panbrello,


    // parameter: u8 new timer0 value
    //
    // NOTE: Only sets the song timer (tempo).  The timer for the sound-effect channels is unchanged.
    set_song_tick_clock,


    // parameter = u8 number of times to loop
    //
    // CAUTION: disables channels if the stack is full
    start_loop,


    // Breaks a loop early if the loop is on the last cycle
    //  Used to implement the `:` token in a MML loop.
    //
    // ie. Allows for `[ abc : de ]3` loops, which will play `abc de abc de abc`.
    //
    // parameter = number of bytes in the bytecode to skip if loop counter == 1.
    //
    // CAUTION: Must be used in a loop.
    skip_last_loop,


    // parameter = subroutine ID
    //
    // NOTE: There is no bounds checking
    call_subroutine_and_disable_vibrato,

    // parameter = subroutine ID
    // NOTE: There is no bounds checking
    call_subroutine,

    // parameter = i16le offset
    //
    // Goto `instructionPtr + offset + 2`
    //
    // CAUTION: Not bounds checked
    goto_relative,
];


// These bytecodes do not have parameters
let NO_ARGUMENT_INSTRUCTIONS = [
    // Jump to `start_loop` if `--loop_count != 0`
    //
    // CAUTION: Must be used in a loop.
    end_loop,


    // Return from a call instruction and disabled vibrato
    return_from_subroutine_and_disable_vibrato,

    // Return from a call instruction
    return_from_subroutine,


    // Disable noise on this channel
    disable_noise,

    // Enable pitch modulation.
    // Only available on channels B - F.
    enable_pmod,

    // Disable pitch modulation
    disable_pmod,

    // Enable echo on this channel
    enable_echo,

    // Disable echo on this channel
    disable_echo,


    // Reuses the temp-GAIN in the last `set_temp_gain*` instruction.
    reuse_temp_gain,
];

let N_PADDING_INSTRUCTIONS = 64 - 1 - INSTRUCTIONS_WITH_ARGUMENTS.len - NO_ARGUMENT_INSTRUCTIONS.len;

// Do not enable PMOD on channels G & H to prevent conflicts with the sound-effect channels.
let ENABLE_PMOD_MASK = 0b00111110;

}


